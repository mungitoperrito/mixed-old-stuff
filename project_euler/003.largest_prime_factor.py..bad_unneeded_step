'''
Problem 3

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?


This version gets all the factors of 600851475143 which isn't needed. It also
  takes forever to run. Or at least more time than I am willing to wait. See
  comment in the bad_run_time_2 file for the next problem. 

Solution:
Dave Cuthbert copyright 2017
License MIT
'''

import math

def find_factors(number_to_factor):
    max_factor = int (number_to_factor / 2) + 1
    factor_list = [factor for factor in range(1, max_factor) 
                          if (number_to_factor % factor == 0)]
    
    return factor_list


def create_list_of_primes(maximum_value):
    list_of_values = [i for i in range(2, maximum_value)]

    index = 0
    while index < len(list_of_values):
       current_value =  list_of_values[index]  
       multiplier = 2 
       while (multiplier < ((maximum_value // current_value) + 1)):  
            if (current_value * multiplier) in list_of_values:
                list_of_values.remove(current_value * multiplier)
            else:
                multiplier += 1
       index += 1
        
    return list_of_values


def check_if_prime(list_of_values, number_to_factor):
    primes  = create_list_of_primes(number_to_factor)
    for v in reversed(list_of_values): 
        if v in primes:
            return v 
    return -1

    
def solve_problem(number_to_factor):
    factor_list = find_factors(number_to_factor)
    largest_prime = check_if_prime(factor_list, number_to_factor)

    return(largest_prime)


if __name__ == "__main__":
    NUMBER_TO_FACTOR = 600851475143
    #NUMBER_TO_FACTOR = 214    # 107 largest prime factor

    print(solve_problem(NUMBER_TO_FACTOR))
