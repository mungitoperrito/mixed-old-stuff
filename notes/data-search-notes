####### export google search history
Find history file:
~/Library/Application Support/Google/Chrome/Default\History
%LocalAppData%\Google\Chrome\User Data\Default\History
C:\Users\USERNAME\AppData\Local\Google\Chrome\User Data\Default

Extract url history to file:
sqlite3 History "select datetime(last_visit_time/1000000-11644473600,'unixepoch'), url from  urls order by last_visit_time desc" > ~/hist.txt

###### search a file using hex values
hexdump -C screenshot.png | grep "ff 00"

###### print first n characters of a file in human readable form
hexdump -C -n 20 filename

###### format first 50 bytes as 64 bit integers (in hex)
hexdump -n 50 -e '"0x%08x "' screenshot.png

###### search RAM in clear text
hexdump -e '90/1 "%_p" "\n"' /dev/mem | less

###### dump a dodgy website safely
curl -s http://google.com | hexdump -C|less

###### decode base64 encoded text  (and renecode it here)
 echo aGVsbG8gd29ybGQh | base64 -d | base64

###### zip file info
Source: https://trailofbits.github.io/ctf/forensics/
unzip will often output helpful information on why a zip will not decompress.
zipdetails -v will provide in-depth information on the values present in the various fields of the format.
zipinfo lists information about the zip file's contents, without extracting it.
zip -F input.zip --out output.zip and zip -FF input.zip --out output.zip attempt to repair a corrupted zip file.
fcrackzip brute-force guesses a zip password (for passwords <7 characters or so).

###### imagefiles
jpg -- exiftool
png -- pngcheck, pngtools
imagemagik -- compare (two files or images, detect steganography)


