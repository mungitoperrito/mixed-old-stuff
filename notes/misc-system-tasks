FREE inodes, dentries, y wb pages
free && sync && echo 3>/proc/sys/vm/drop_caches


GET NUMBER OF THREADS PER USER:
for USR in $(ps aux | awk '{print substr($1, 1, length($1)-1)}' | sort -u) ; do echo -n "${USR}  " ; ps -efT |grep "^${USR}" |wc -l ; done


GET TOTAL NUMBER OF PROCESSES 
ps -eo nlwp | tail -n +2 | awk '{ num_threads += $1 } END { print num_threads }'


INSTALL AND USE LOCAL VIRTUAL ENV
pip install virtualenv --user
 ~/.local/bin/virtualenv virt_env_name
cd virt_env_name
source bin/activate
pip install some_packages


VIRTUALBOX: Add host only network card --> 
    edit /etc/network/interfaces 
    add:  auto eth0:1 
          face eth0:1 inet static 
          address 192.168.1.24 
          netmask 255.255.255.0 
          network 192.168.1.1 
          broadcast 192.168.1.255 
          gateway  192.168.1.1 
    restart


VIRTUALBOX: Change ubuntu server console size --> 
reboot c to enter grub 
vbeinfo for console sizes 
edit /etc/default/grub 
add/modify:  
    GRUB_GFXMODE=1152x864x32 
    GRUB_CMDLINE_LINUX_DEFAULT="nomodeset" 
    GRUB_GFXPAYLOAD_LINUX=keep


CLEAN MACHINES
# Set priority for clearing caches (default=100)
echo 1000 >  /proc/sys/vm/vfs_cache_pressure

# view current system memory state (with 'totals' line)
free -m -t

# View use of slab memeory
slabtop --once

# Add yourself to docker group if needed
# sudo usermod -a -G docker yourname

# Docker Clean UP
## Old containers first
docker rm $(docker ps -qa --no-trunc --filter "status=exited")

## Then orphaned images
docker image ls --all | wc -l         # Count images
docker rmi $(docker images --filter "dangling=true" -q --no-trunc)
docker image ls --all | wc -l         # Count images

# Clear Caches
# *May* be problematic for running processes
## Clear pagecache
sync; echo 1 > /proc/sys/vm/drop_caches

## Clear dentries, inodes
sync; echo 2 > /proc/sys/vm/drop_caches
