# A collection of howto notes and reminders gathered over time. 

alias: alias ..='cd ..'
alias: alias la='ls -al'
alias: alias ll='ls -l'
alias: alias ds='date +%F-%H%M%S'
alias: alias psg='ps -eaf | grep -i'
alias: alias h='history | tail -n 20'
alias: alias hexdump='od -Ax -tx1z -v'
alias: alias rdtop='rdesktop -g 1270x1000 -a 16 -d liveops -u dcuthbert 192.168.33.48 -r sound:remote'


android: change busybox permissions -> adb shell chmod 06755 /data/busybox
android: create new AVD -> ./android-sdk-linux/tools/android create avd -t 2 -n NAME -p /storage/android-images/DIR-TO-STORE
android: link to busybox binary -> adb shell ln -s /data/busybox /system/xbin/busybox
android: mount avd for rooting ->  ./emulator -avd rootedNexus  -partition-size 512 -no-snapshot-load
android: push a file to emulated image -> adb push FILENAME /data/local
android: remount /system rw -> adb shell mount -o rw,remount -t yaffs2 /dev/block/mtdblock0 /system
android: unlock screen: telnet localhost 5554 ; event send EV_KEY:KEY_MENU:1 EV_KEY:KEY_MENU:0   ; quit


at: download website at 1am -> echo 'wget' | at )1:00 


backup: archive and mail backup -> tar cvf - start_dir | uuencode | mail a@a.com
backup: rename a file -> cp filename filename$( date +%F )


bad superblock: fix  ->  use SystemRecoveryCD  ; newfs -N /dev/ada ; fsck -b[next superblock]


bash: close a hung remote session: [enter] ~ .
bash: command history, list -> history 
bash: command history, execute cmd n -> !n
bash: command history, execute last cmd  -> !!
bash: command history, execute nth last cmd  -> !-n
bash: command history, execute cmd starting with string -> !string
bash: command history, go to the directory in last command -> cd !!:h 
bash: command history, edit 'filename' used in last command -> vi !!:t
bash: command history, !* -> all the arguments from the last command
bash: command history, ^error^fixed -> fix typos in last cmd entered
bash: command history, the 0th word ( command ) -> !:0 
bash: command history, the nth word -> !:n 
bash: command history, the first argument -> !^ 
bash: command history, the last argument -> !$ 
bash: ctrl-A move to beginning of line
bash: ctrl-E move to end of line
bash: ctrl-K delete to end of line
bash: ctrl-M-Y paste last command argument
bash: ctrl-R search cmd history for string
bash: ctrl-W delete to beginning of line
bash: ctrl-Y paste ctrl-K/ctrl-W deletions
bash: create a function -> function funcName { f_name=${0}, arg_1=${1}, num_args=${#}, ret_code=${?} };
bash: current process PID -> $$
bash: debugging in a script: set -xv ( x print commands and args, v print input lines; +xv to end )
bash: enter multiple characters on command line eg, xxxxx -> alt+5 x 
bash: error handling: set -euo pipefail (-e exit on error, -u exit unset variable, -o pipefail work on piped cmds)
bash: expand URLs -> function fullurl { wget --max-redirect=0 $1 2>&1 | grep Location | cut -d' ' -f2;}
bash: get 1 minute load info from /proc  ->  read one five fifteen rest < /proc/loadavg ; echo $one
bash: get a range of numbers from 1 to 10 -> seq 1 10
bash: get information about a file -> whatis fileName
bash: get information about a file location -> whereis fileName
bash: get memory information -> free
bash: infinite loop as TRUE -> while :
bash: math, convert bases -> echo 'obase=16; ibase=10; 255' | bc
bash: math, evaluate expr -> echo $(( 3 + 4 ))
bash: pattern match on a variable ( keep everything up to first . ) -> varName=${ varName%%.* }   
bash: pattern match on a variable ( drop everything up to last / ) -> varName=${0##*/}   
bash: read a file into a script ( source file in script )  -> . fileName 
bash: read a file to variable -> varName=$(< /proc/fileName)   
bash: redirect stderr to stdout -> cmd 2>&1
bash: redirect stderr & stdout to file -> cmd &> fileName
bash: redirect stderr to stdout and both to file -> cmd > fileName 2>&1
bash: reread .bashrc -> source ~/.bashrc
bash: rename files -> for fn in `ls` ; do new="$( echo $fn | cut -c 5- )" ; mv $fn $new ; done
bash: reset screen after binary cat -> reset
bash: reset screen after binary cat -> echo <ctrl><v> <esc><c> <enter>
bash: variables -> current process id num -> $$
bash: variables -> last return value -> $?
bash: variables -> list of execution vars -> $-
bash: variables -> list of shell args -> $* 
bash: variables -> list shell variables -> printenv ( export for currently exported variables )
bash: variables -> number of arguments -> $# 
bash: variables, enable warnings -> set -u  
bash: variables, disable warnings -> set +u 
bash: while loop on command line -> while [ 1 ] ; do someStuff ; done
bash: work in a subshell, switch dir, do stuff, come back to orig dir: ( cd /tmp && doSomething )


.bashrc: See aliases above
.bashrc: append new lines instead of overwriting history file: shopt -s histappend  
.bashrc: don't double up history entries ->  export HISTCONTROL=ignoredups
.bashrc: don't save entries that start with spaces ->  export HISTCONTROL=ignorespace
.bashrc: don't save spaces, doubles ->  export HISTCONTROL=ignoreboth  or export HISTCONTROL=ignorespace:ignoredups
.bashrc: don't save some commands -> export HISTIGNORE='ls:bg:fg:history'
.bashrc: don't let multiple shells mess up history -> export PROMPT_COMMAND='history -a'
.bashrc: sort sequence for sort and ls -> export LC_COLLATE=C



boot: single user mode at boot prompt -> linux -s or linux single
boot: to a shell without password, grub -> add "init=/bin/bash" to kernel line ; then remount fs
boot: to a shell without password, lilo-> add "linux init=/bin/bash" ; then remount fs


bugzilla: relative dates -> -1w ( last week ), -3d ( last 3 days ), -1y ( last year )


burp: default ports -->  127.0.0.1:8080
burp: problems starting -->  java -jar burp-<version>.jar --use-defaults
burp: server certificate --> http://burp then install in browser cert store


cdrom: create compressed image from current dir -> mkisofs -V NAME -r dir |gzip > cdrom.iso.gz
cdrom: copy a data disk -> gzip < /dev/cdrom > cdrom.iso.gz


centos: yum gpg key config: rpm --import http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-4


chrome: control settings -> about:flags
chrome: enable / disable plugins -> settings > advanced > content > disable individual plugins
chrome: view page source -> append command in URL bar: view-source:www.somesite.com


clock: time on hardware clock -> hwclock --show


code quality tools: static analysis --> splint
code quality tools: which code is being executed --> gcov
code quality tools: how code is being used--> gprof


copy dvd 1: isoinfo -d -i /dev/sr0 | grep -i -E 'block size|volume size'
copy dvd 2: dd if=/dev/sr1 of=/mnt/incoming/test.iso bs=<BLOCK SIZE> count=<VOLUME SIZE>
copy dvd 3: wodim -eject -tao  speed=2 dev=/dev/sr1 -v -data myiso.iso


cp: preserve file attributes -> cp -p fileName copyName


cpio: read contents of ramdisk image 1 ->  cp initrd-2.6.14.img{,.gz} 
cpio: read contents of ramdisk image 2 ->  gunzip initrd-2.6.14.img.gz
cpio: read contents of ramdisk image 3 ->  cpio -i --make-directories < initrd-2.6.14.img f: bs=4M


cron: 0-59/5 range of 0 to 59 step every 5 
cron: >/dev/null 2>/&1 will stop mail messages being sent after execution


curl: post to a form -> curl -X POST -F "name=user" -F "password=test" http://URL/example.php
curl: post with data -> curl -d "data=example1&data2=example2" http://URL/example.cgi
curl: post with file -> curl -X POST -F "image=@/path/example.gif" http://URL/uploadform.cgi
curl: post without data -> curl -X POST http://URL/example.php
curl: post nested json to https ->  curl -g --insecure -H 'Accept: application/json' -H 'Content-Type: application/json' --data '{"OuterJSON":{"InnerJSON":"val1","B":"1"},"MoreJSON":"DD"}'  -X POST  https://<server>/<endpoint>
curl: download multiple files  -->  curl -O http://www.aa.com/file1 -O http://www.aa.com/file2 -O http://www.aa.com/file3
curl: follow 30x redirects -->  curl -L google.com
curl: show request and response headers --> curl -v someSite.com
curl: show only response headers --> curl -I someSite.com


cvs: login -> cvs -d :pserver:dcuthbert@cvs.liveops.com:/code login
cvs: update tree -> cvs -d :pserver:release@cvs.liveops.com:/code co -r 'CC_2007-01-23-01_RELEASE' callcenterappeng 


cygwin: dd to USB drive at D:\ -> dd if=image.iso of=\\.\d: bs=4M


cyrus: admin tool ->  cyradm -u mailadmin localhost
cyrus: admin tool admin login foud in -> /etc/imapd.conf  


date: set to Mar 21, 2007  01:03 -> date 032101032007 
date: what day did something happen -> date --date 'feb 17 1969'


dbctl: dev setup, for proper dbase ->  dbctl -c use -w user.dcuthbert
dbctl: get read/write access to dbase ->  dbctl -c shell --db ccconf
dbctl: update table ->  dbctl -c copydbs -m dbbackup-mii -d ccconf -t offer


dd: See forensics notes


disk, partition tools: view, edit partitions --> fdisk, sfdisk, cfdisk 
disk, partition tools: view storage allocations --> df, lsblk, blkid
disk, partition tools: print disk and partition list -->  hwinfo --block --short


dns: lookup -> dig hostname
dns: lookup -> nslookup www.fqdn.com 
dns: server used -> /etc/resolv.conf


drac: default usr/pwd from Dell -> root / calvin


echo: omit trailing newline -> echo -n <some output>


excel: edit active cell -> <F2>
excel: enter <CR> in cell -> <alt><enter>


fdisk: show partition size and type -> fdisk -l


file: get basic info -> stat FileName
file: list recursively -> tree


filesystem: all purpose tool -> tune2fs 
filesystem: volume id -> vol_id  /dev/hda1


find: delete by inode number  ->  find . -inum 12345678 -exec rm -i {} \;
find: dirs not world accessible -> find -type f ! -perm -444
find: files not world readable -> find -type f ! -perm -444
find: files larger than 100MB on local file system -> find / -xdev -type f -size +100000000c  -exec ls -lh {} \; 2>/dev/null
find: files modified between 5 and 10 days ago -> find . -type f -mtime -10 -mtime +5
find: files and search with a grep expression ->  find . -name FilesToCheck* -exec grep -il "stringToFind" {} \;
find: files and search with a grep expression faster ->  find . -name FilesToCheck* | xargs grep -il "stringToFind" 
find: seach for EXPR -> find -name'*.[txt]' | xargs grep -E 'EXPR'
find: search for directories in this one -> find -maxdepth 1 -type d 
find: who's using files -> find . -name \* -exec fuser -u {} \;


firefox: program/environment info -> about:plugins
firefox: remove a saved entry from form history -> select entry then [shift][delete]


floppy: create a blank iso -> dd if=/dev/zero of=BlankFloppy.img bs=1 count=1440
floppy: format as msdos -> mkfs msdos /dev/floppy



