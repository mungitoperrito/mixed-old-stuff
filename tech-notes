# A collection of howto notes and reminders gathered over time. 

alias: alias ..='cd ..'
alias: alias la='ls -al'
alias: alias ll='ls -l'
alias: alias ds='date +%F-%H%M%S'
alias: alias psg='ps -eaf | grep -i'
alias: alias h='history | tail -n 20'
alias: alias hexdump='od -Ax -tx1z -v'
alias: alias rdtop='rdesktop -g 1270x1000 -a 16 -d liveops -u dcuthbert 192.168.33.48 -r sound:remote'


android: change busybox permissions -> adb shell chmod 06755 /data/busybox
android: create new AVD -> ./android-sdk-linux/tools/android create avd -t 2 -n NAME -p /storage/android-images/DIR-TO-STORE
android: link to busybox binary -> adb shell ln -s /data/busybox /system/xbin/busybox
android: mount avd for rooting ->  ./emulator -avd rootedNexus  -partition-size 512 -no-snapshot-load
android: push a file to emulated image -> adb push FILENAME /data/local
android: remount /system rw -> adb shell mount -o rw,remount -t yaffs2 /dev/block/mtdblock0 /system
android: unlock screen: telnet localhost 5554 ; event send EV_KEY:KEY_MENU:1 EV_KEY:KEY_MENU:0   ; quit


at: download website at 1am -> echo 'wget' | at )1:00 


backup: archive and mail backup -> tar cvf - start_dir | uuencode | mail a@a.com
backup: rename a file -> cp filename filename$( date +%F )


bad superblock: fix  ->  use SystemRecoveryCD  ; newfs -N /dev/ada ; fsck -b[next superblock]


bash: close a hung remote session: [enter] ~ .
bash: command history, list -> history 
bash: command history, execute cmd n -> !n
bash: command history, execute last cmd  -> !!
bash: command history, execute nth last cmd  -> !-n
bash: command history, execute cmd starting with string -> !string
bash: command history, go to the directory in last command -> cd !!:h 
bash: command history, edit 'filename' used in last command -> vi !!:t
bash: command history, !* -> all the arguments from the last command
bash: command history, ^error^fixed -> fix typos in last cmd entered
bash: command history, the 0th word ( command ) -> !:0 
bash: command history, the nth word -> !:n 
bash: command history, the first argument -> !^ 
bash: command history, the last argument -> !$ 
bash: ctrl-A move to beginning of line
bash: ctrl-E move to end of line
bash: ctrl-K delete to end of line
bash: ctrl-M-Y paste last command argument
bash: ctrl-R search cmd history for string
bash: ctrl-W delete to beginning of line
bash: ctrl-Y paste ctrl-K/ctrl-W deletions
bash: create a function -> function funcName { f_name=${0}, arg_1=${1}, num_args=${#}, ret_code=${?} };
bash: current process PID -> $$
bash: debugging in a script: set -xv ( x print commands and args, v print input lines; +xv to end )
bash: enter multiple characters on command line eg, xxxxx -> alt+5 x 
bash: expand URLs -> function fullurl { wget --max-redirect=0 $1 2>&1 | grep Location | cut -d' ' -f2;}
bash: get 1 minute load info from /proc  ->  read one five fifteen rest < /proc/loadavg ; echo $one
bash: get a range of numbers from 1 to 10 -> seq 1 10
bash: get information about a file -> whatis fileName
bash: get information about a file location -> whereis fileName
bash: get memory information -> free
bash: infinite loop as TRUE -> while :
bash: math, convert bases -> echo 'obase=16; ibase=10; 255' | bc
bash: math, evaluate expr -> echo $(( 3 + 4 ))
bash: pattern match on a variable ( keep everything up to first . ) -> varName=${ varName%%.* }   
bash: pattern match on a variable ( drop everything up to last / ) -> varName=${0##*/}   
bash: read a file into a script ( source file in script )  -> . fileName 
bash: read a file to variable -> varName=$(< /proc/fileName)   
bash: reread .bashrc -> source ~/.bashrc
bash: rename files -> for fn in `ls` ; do new="$( echo $fn | cut -c 5- )" ; mv $fn $new ; done
bash: reset screen after binary cat -> reset
bash: reset screen after binary cat -> echo <ctrl><v> <esc><c> <enter>
bash: variables -> current process id num -> $$
bash: variables -> last return value -> $?
bash: variables -> list of execution vars -> $-
bash: variables -> list of shell args -> $* 
bash: variables -> list shell variables -> printenv ( export for currently exported variables )
bash: variables -> number of arguments -> $# 
bash: variables, enable warnings -> set -u  
bash: variables, disable warnings -> set +u 
bash: while loop on command line -> while [ 1 ] ; do someStuff ; done
bash: work in a subshell, switch dir, do stuff, come back to orig dir: ( cd /tmp && doSomething )


.bashrc: See aliases above
.bashrc: append new lines instead of overwriting history file: shopt -s histappend  
.bashrc: don't double up history entries ->  export HISTCONTROL=ignoredups
.bashrc: don't save entries that start with spaces ->  export HISTCONTROL=ignorespace
.bashrc: don't save spaces, doubles ->  export HISTCONTROL=ignoreboth  or export HISTCONTROL=ignorespace:ignoredups
.bashrc: don't save some commands -> export HISTIGNORE='ls:bg:fg:history'
.bashrc: don't let multiple shells mess up history -> export PROMPT_COMMAND='history -a'
.bashrc: sort sequence for sort and ls -> export LC_COLLATE=C



boot: single user mode at boot prompt -> linux -s or linux single
boot: to a shell without password, grub -> add "init=/bin/bash" to kernel line ; then remount fs
boot: to a shell without password, lilo-> add "linux init=/bin/bash" ; then remount fs


bugzilla: relative dates -> -1w ( last week ), -3d ( last 3 days ), -1y ( last year )


burp: default ports -->  127.0.0.1:8080
burp: problems starting -->  java -jar burp-<version>.jar --use-defaults
burp: server certificate --> http://burp then install in browser cert store


cdrom: create compressed image from current dir -> mkisofs -V NAME -r dir |gzip > cdrom.iso.gz
cdrom: copy a data disk -> gzip < /dev/cdrom > cdrom.iso.gz


centos: yum gpg key config: rpm --import http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-4


chrome: control settings -> about:flags
chrome: enable / disable plugins -> settings > advanced > content > disable individual plugins
chrome: view page source -> append command in URL bar: view-source:www.somesite.com


clock: time on hardware clock -> hwclock --show


code quality tools: static analysis --> splint
code quality tools: which code is being executed --> gcov
code quality tools: how code is being used--> gprof


cp: preserve file attributes -> cp -p fileName copyName


cpio: read contents of ramdisk image 1 ->  cp initrd-2.6.14.img{,.gz} 
cpio: read contents of ramdisk image 2 ->  gunzip initrd-2.6.14.img.gz
cpio: read contents of ramdisk image 3 ->  cpio -i --make-directories < initrd-2.6.14.img f: bs=4M


cron: 0-59/5 range of 0 to 59 step every 5 
cron: >/dev/null 2>/&1 will stop mail messages being sent after execution


curl: post nested json to https ->  curl -g --insecure -H 'Accept: application/json' -H 'Content-Type: application/json' --data '{"OuterJSON":{"InnerJSON":"val1","B":"1"},"MoreJSON":"DD"}'  -X POST  https://<server>/<endpoint>
curl: download multiple files  -->  curl -O http://www.aa.com/file1 -O http://www.aa.com/file2 -O http://www.aa.com/file3
curl: follow 30x redirects -->  curl -L google.com
curl: show request and response headers --> curl -v someSite.com
curl: show only response headers --> curl -I someSite.com


cvs: login -> cvs -d :pserver:dcuthbert@cvs.liveops.com:/code login
cvs: update tree -> cvs -d :pserver:release@cvs.liveops.com:/code co -r 'CC_2007-01-23-01_RELEASE' callcenterappeng 


cygwin: dd to USB drive at D:\ -> dd if=image.iso of=\\.\d: bs=4M


cyrus: admin tool ->  cyradm -u mailadmin localhost
cyrus: admin tool admin login foud in -> /etc/imapd.conf  


date: set to Mar 21, 2007  01:03 -> date 032101032007 
date: what day did something happen -> date --date 'feb 17 1969'


dbctl: dev setup, for proper dbase ->  dbctl -c use -w user.dcuthbert
dbctl: get read/write access to dbase ->  dbctl -c shell --db ccconf
dbctl: update table ->  dbctl -c copydbs -m dbbackup-mii -d ccconf -t offer


dcfldd: improved version of dd used for forensic dd copying


dd: kill -10 PID will print out progess so far
dd: dd if=/dev/sda bs=1 count=512 | od -c -v


disk, partition tools: view, edit partitions --> fdisk, sfdisk, cfdisk 
disk, partition tools: view storage allocations --> df, lsblk, blkid
disk, partition tools: print disk and partition list -->  hwinfo --block --short


dns: lookup -> dig hostname
dns: lookup -> nslookup www.fqdn.com 
dns: server used -> /etc/resolv.conf


drac: default usr/pwd from Dell -> root / calvin


echo: omit trailing newline -> echo -n <some output>


excel: edit active cell -> <F2>
excel: enter <CR> in cell -> <alt><enter>


fdisk: show partition size and type -> fdisk -l


file: get basic info -> stat FileName
file: list recursively -> tree


filesystem: all purpose tool -> tune2fs 
filesystem: volume id -> vol_id  /dev/hda1


find: delete by inode number  ->  find . -inum 12345678 -exec rm -i {} \;
find: dirs not world accessible -> find -type f ! -perm -444
find: files not world readable -> find -type f ! -perm -444
find: files modified between 5 and 10 days ago -> find . -type f -mtime -10 -mtime +5
find: files and search with a grep expression ->  find . -name FilesToCheck* -exec grep -il "stringToFind" {} \;
find: files and search with a grep expression faster ->  find . -name FilesToCheck* | xargs grep -il "stringToFind" 
find: seach for EXPR -> find -name'*.[txt]' | xargs grep -E 'EXPR'
find: search for directories in this one -> find -maxdepth 1 -type d 
find: who's using files -> find . -name \* -exec fuser -u {} \;


firefox: program/environment info -> about:plugins
firefox: remove a saved entry from form history -> select entry then [shift][delete]


floppy: create a blank iso -> dd if=/dev/zero of=BlankFloppy.img bs=1 count=1440
floppy: format as msdos -> mkfs msdos /dev/floppy


github: compare a branch across time ->  append '/compare' to repo url ; add @{YYYY-MM-DD} to branch name


gnome: remove desktop icons -> gconf-editor then unselect in  apps > nautilus > desktop


google: search for file type ->   inurl:microsoft filetype:iso
google: search for file type ->   allinurl:ftp:// <hostname> filetype:txt | xls | doc | docx | jpg | jpeg | pdf
google: search for file type ->   site:<hostname> filetype:txt | xls | doc | docx | jpg | jpeg | pdf
google: search for song/artist -> intitle:index.of (mp3 OR ogg) songTitle -html
google: search for a directory -> intitle:index.of.etc


google: map api -> http://maps.googleapis.com/maps/api/streetview?size=600x300&location=39.9334,-74.9443&sensor=false


google sheets: include if threshhold reached ->    =COUNTIF(A2:A500,0)
google sheets: select using SQL & boolean value -> =MIN(QUERY(A2:C500, "SELECT (C) WHERE A = 0"))
google sheets: select using SQL & range value ->   =ROUND(AVERAGE(QUERY(B2:C500, "SELECT (C) WHERE (B>199 AND B<250)")), 2)
google sheets: select using SQL range & boolean -> =ROUND((countif(QUERY(A2:C500, "SELECT (A) WHERE (B>199 AND B<250)"),0)) / (countif(QUERY(A2:C500, "SELECT (A) WHERE (B>199 AND B<250)"),1)), 2)


grep: limit results to NUM characters on each side of search term:  ->   grep -E -o ".{0,NUM}wantedText.{0,NUM}" *


here docs: until end of -> << EOF ... \nEOF


hexdump: alias hexdump=`od -Ax -tx1z -v`
hexdump: dd if=/dev/sda1 bs=1 count=512 | od -c -v


http: test connection -> GET /index.htm HTTP/1.1 
http: test connection -> host: some.host.com
http: test connection -> <empty line>


ical: wget --http-user=dave --http-passwd=pa55wd 192.168.1.19/servlet/webdav.ical


images:  make thumbnails ->  djpeg  -scale 1/2 filename_in | cjpeg -quality 75 -outfile filename_out 


IMAP server: to test connection -> telnet someimapserver.domain 143
IMAP server: to test connection -> A001 NOOP
IMAP server: to test connection -> A002 CAPABILITY
IMAP server: to test connection -> A003 LOGIN user pass
IMAP server: to test connection -> A004 LOGOUT
IMAP server: to test connection -> Other commands FETCH [number] ALL
IMAP server: to test connection -> Other commands LIST  "" inbox.*
IMAP server: to test connection -> Other commands SELECT inbox
IMAP server: to test connection -> Other commands
IMAP server: to test connection -> Other commands
IMAP server: to test connection -> Other commands


.inputrc: "\e[A": history-search-backward
.inputrc: "\e[B": history-search-forward


ipv6: multicast ping to see who's on network ->  ping6 -I interface-name ff02::1


java: enable auto updates tab -> regedit ; add DWORD EnableJavaUpdate to HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\Java Update\Policy ; value == 1
java: expand jar file: jar -xf foo.jar
java: get jvm version -> java -version
java: get jvm version ( windows) -> jview
java: location of main() class in jar: META-INF/MANIFEST.MF -> Main-Class: myPrograms.MyClass
java: JVM class loader -> -XX:+TraceClassLoading  ; -XX:+TraceClassUnloading 
java: JVM debugging -> -XX:-PrintCommandLineFlags  
java: JVM garbage collection -> -verbose:gc log GC runs and times  ; -XX+PrintGCDetails more info
java: JVM list available options -> java -help ; java -X
java: JVM memory options -> -Xms 256M  initial heap size ; -Xmx 256M   max heap size ; -Xss 256M   thread stack size
java: JVM memory options -> -XX:PermSize=256M ; -XX:MaxPermSize=256M   PermGen space inside heap 
java: JVM profiling -> -Xprof ; -Xrunhprof
java: JVM remote debugging -> -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000
java: run a jar file: java -jar foo.jar
java: wrap jar in an .exe for windows: jsmooth  jsmooth.sourceforge.com


java tuning: -Xms == -Xmx ( aviod garbage collection during resize )
java tuning: -XX:PermSize == -XXMaxPermSize ( aviod garbage collection during resize, both values required )


javascript: set a breakpoint -> type 'debugger' at any point
javascript: hide from non script browser ->  <SCRIPT>
javascript: hide from non script browser ->  <!-- HTML comment hides javascript
javascript: hide from non script browser ->  put javascript here
javascript: hide from non script browser ->  // -->  javascript comment hides end of HTML comment
javascript: hide from non script browser ->  </SCRIPT>  HTML ignores unknown tags, javascript ignores HTML Comments
javascript: call external file form HTML -> <SCRIPT SRC="someFile.js">
javascript: call external file form HTML -> document.write("Error message only appears if problems with someFile.js")
javascript: call external file form HTML -> </SCRIPT>


kali_linux: change screen resolution -> xrndr (to get sizes) ; xrndr -s 1400x1050    


join pdfs: gs -sDEVICE=pdfwrite -o outfile.pdf <infile 1..n.pdf> ( using ghostview )


kill a process using a file -> fuser -k 


last reads the wtmp file, gives login/logout times/usrs


LDAP logs - debug level can be increased by changing 'loglevel 0' to 'loglevel  256'
LDAP restart: cmd> rcldap restart
LDAP check server running:  netstat -tan |grep LISTEN |grep 389
LDAP change pwd: as root run slappasswd to generate new passwd string
LDAP change pwd: edit /etc/openldap/slapd.conf to replace rootDN password


less: find matching lines ( forward , backward ) -> / string, ? string
less: find non mathcing lines -> ! string
less: ignore case toggle -> -i
less: maintain page screen position -> ^K
less: repeat search ( forward , backward ) -> n , N
less: show 5 previous lines -> -j5


locate: find files on the system -> locate <filename>


look: lookup spelling of a word -> look beginString


ls: list, sorted by size ->  ls -S


lsof: lists open files and the processes that are accessing them
lsof: what's listening to an open port -> lsof -i :portnumber


mail: local mail not working after cyrus install -> cat > ~username/.forward
mail: local mail not working after cyrus install ->   /var/spool/mail/username
mail: send binary file -> uuencode some_archive.tar | mail a@a.com
mail: send text and binary file -> (cat mailtext; uuencode in.jpeg out.jpg) | mail a@a.com
mail: send text and attachment -> mutt -s "Subject goes here" -a attached.file a@a.org < file_with_body.txt
mail: send text and no attachment -> mutt -s "Subject goes here" -a attached.file a@a.org < /dev/null


man: get list of man pages with someThing -> apropos someThing


mkdir: make any missing parent directories -> mkdir -p


mount: remount file system rw -> mount -o remount,rw /
mount iso: mount -o -t iso9660 filename.iso mountpoint
mount floppy: mount -o loop -t msdos  floppy.img mountpoint
mount SLES9 isos: mount points are SLES0 ... SLES5 ( disc name - 1 )


mysql: change column header in result table -> SELECT COUNT(id) AS row_count FROM test_table;
mysql: 'control c' like functionality within mysql -> ctrl + w
mysql: edit multiline queries -> enter edit at mysql prompt, then normal vi
mysql: fix root pwd 1 -> service mysql stop
mysql: fix root pwd 2 -> mysqld_safe --skip-grant-tables &
mysql: fix root pwd 3 -> mysql -uroot ( no pwd needed )
mysql: fix root pwd 4 -> UPDATE user SET password=PASSWORD("abcd") WHERE user="root"; 
mysql: fix root pwd 5 -> FLUSH PRIVILEGES;
mysql: get number of distinct last names -> SELECT COUNT(DISTINCT lastname) AS lastname_count FROM master_name;
mysql: get largest value in column -> SELECT MAX(name_dateadded) FROM master_name;
mysql: get rows 11-15 from a table -> SELECT * FROM ccconf.rep LIMIT 10, 5 ; 
mysql: get substring chars 1-10 from col -> SELECT substring( colname, 1, 10 ) AS Date FROM table;
mysql: get substring nicely ordered -> SELECT DISTINCT substring( colname, 1, 10 ) AS Date FROM table ORDER BY  colname DESC LIMIT 10;
mysql: get substring ordered & counted -> SELECT substring( starttime, 1, 10 ) AS  Date, count(*) as Count FROM table GROUP BY Date ORDER BY starttime DESC LIMIT 10;
mysql: replication broken:  mysql> show slave status\G  --->  .. Slave_SQL_Running: No ..
mysql: replication broken:  mysql> set global sql_slave_skip_counter=1;
mysql: replication broken:  mysql> start slave;
mysql: show version -> SELECT version(); or status; 
mysql: show results as key value pairs > SELECT  * FROM table \G


netsat: connections to/from machine -> netstat -tup
netsat: open tcp ports & PIDs -> netstat -plant


netsh.exe: MS commandline interface for configuration and monitoring of MS systems


network: bounce remote network interface -> create & run nohup script:  ifdown eth0 ; sleep 10 ; ifup eth0   
network: stats, change card config -> ethtool eth0


NT password dump: ftp.samba.org/pub/samba/pwdump puts NT password dbase from registry into smbpasswd file


opensssl:  check speed to return a page -> openssl s_time -connect remote.com:443 -www /some/page.html
opensssl:  convert DER (.crt .cer .der) to PEM -> openssl x509 -inform der -in certificate.cer -out certificate.pem
opensssl:  convert PEM file to DER -> openssl x509 -outform der -in certificate.pem -out certificate.der
opensssl:  convert KCS#12 (.pfx .p12) w/ private key and certificates to PEM -> openssl pkcs12 -in keyStore.pfx -out keyStore.pem -nodes
opensssl:  convert KCS#12 (.pfx .p12), extract keys -> openssl pkcs12 -in keyStore.pfx -out keyStore.pem -nodes -nocerts
opensssl:  convert KCS#12 (.pfx .p12), extract certs -> openssl pkcs12 -in keyStore.pfx -out keyStore.pem -nodes -nokeys
opensssl:  convert PEM & private key to PKCS#12 (.pfx .p12) -> openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CACert.crt


OSX: single user login -> apple S
OSX: reset root pasword: sh /etc/rc  then password
OSX: pbpaste -> copy clipboard to command line, eg. pbpaste | wc -w
OSX: pbcopy -> copy command line clipboard to , eg. pbcopy < lotsoftext.txt
OSX: screensaver/lockscreen -> drag System->Library->Frameworks->Screensaver.framework->Versions->A->Resources->ScreenSaverEngine.app onto dock


password: boot single user mode ( RHEL ) -> at boot screen type a; apend 'single' at end of cmd line
password: change forgotten root passwd -> login single user mode; may need to remount / ; passwd
password: remove -> remove 2d field from  /etc/shadow


perl: add 1st & 2d last cols -> perl -lane 'print $F[0] + $F[-2]'
perl: change regex delimiter ->  $testString =~ m#pattern#
perl: change strings perl -i.old -pe 's{\boldvar\b}{newvar}g' *.[chy]
perl: check syntax -> perl -c perlFile.pl
perl: check syntax, with warnings -> perl -wc perl_script.pl
perl: cmd line: autosplit on ':' ->  $ perl -an -F: -e 'if ($F[2] > 100) { print $F[0],"\n"; }' /etc/passwd
perl: cmd line: edit file in place -> $ perl -pi -e 's/cat/dog/' file
perl: cmd line: edit file in place, backup orig -> $ perl -pi.backExtension -e 's/cat/dog/' file
perl: cmd line: take input as one big line -> perl -0777  ( use m after regex to match across lines )
perl: delete first 10 lines -> perl -i.bak -ne 'print unless 1..10' filename
perl: find palindromes -> perl -lne 'print if $_ eq reverse' /usr/dict/words
perl: look up to x but not including x ->  (?=x)
perl: look up to where x would be but x isn't ->  (?!x)
perl: match double letter -> $testString =~ /(.)\1/
perl: part of string matched before, matched, after ->  $`  $&   $'
perl: print first 50 lines -> perl -pe 'exit if $. > 50' filename
perl: print out a field from pipe on cmd line ->   cmd | perl -ne '@vals = split /\s+/ ; print $vals[1] . "\n" ;' 
perl: read perl documentation -> pod2text perlModuleName
perl: read perl documentation -> pod2usage perlModuleName
perl: read perl documentation -> pod2html perlModuleName > /some/html/directory  or browse
perl: rename files -> ls | perl -n -e ' chomp;  m/(.*)\.mp3/ ;  $newFile = "$1.mp3" ; system( "mv  \"$_\"  \"$newFile\"" )'
perl: replace text inline ->  perl -pi -e 's/old_string/new_string/g' filename_pattern
perl: reverse file line by line -> perl -e 'print reverse <>' filename
perl: start debugger to test out some random perl code -> perl -d -e ";"
perl: sort numerical ->  @out = sort { $a <=> $b } @in ;


pgrep: list process ids for procs with string in cmd line: preg -lf string


POP server: to test connection -> telnet somepopserver.domain 110
POP server: to test connection -> Some commands: USER PASS QUIT


postfix: current configuration -> postconf [ -n ]
postfix: ERR_1: The error message -> /etc/postfix/virtual.db: No such file or directory
postfix: ERR_1: fixed by running  -> postmap /etc/postfix/virtual 
postfix: to delete mail in queue -> postsuper -d [ mailnumber | ALL ]
postfix: to list queue -> mailq
postfix: what if mail sent to -> /usr/sbin/sendmail -bv address
postfix: report on delivery status -> /usr/sbin/sendmail -v address
postfix: bottleneck analysis -> qshape


postgress: admin tool pgAdmin III


proc file sys: info on running process -> cat /proc/self
proc file sys: currently open file descriptors -> /proc/self/dev/fd


process accounting: touch /var/log/acct
process accounting: accton /var/log/acct
process accounting: [ translate to text from binary ]
process accounting: [ send to remote machine ]
process accounting: lastcomm -f accounting_file
process lists: pstree ( shows tree of processes and parents )


proxy: configure yum -> add proxy=http://proxy.vmware.com:3128 to  /etc/yum.conf 


python: debugger ->  import pdb; pdb.set_trace()
python: pipe 32 As to someProg -> python -c "print( 'A'*32)" | someProg


ram disk 1a:  mknod -m 660 /dev/ram b 1 1
ram disk 2a:  dd if=/dev/zero of=/dev/ram bs=1024 count=4000
ram disk 3a:  mkdir /mnt/ramdisk
ram disk 4a:  mount -t ext2 /dev/ram /mnt/ramdisk


ram disk 1b:  mkdir -p /ramdisk
ram disk 2b:  mount -t ramdisk none /ramdisk -o maxsize=65536
ram disk 3b:  chmod 7777 /ramdisk


ram disk 1c:  mkdir -p /ramdisk
ram disk 2c:  mkfs -b 1024 -0 Linux -L RAMDisk -T ext2 /dev/ram0 65536
ram disk 3c:  mount /dev/ram0 /ramdisk


rdp: send <ctrl><alt><del> ->  <ctrl><alt><end>


rdesktop: rdesktop -g 1152x921 -a 16 -d liveops -u dcuthbert 192.168.33.48 -r sound:remote


redhat: edit firewall, selinux ->  system-config-securitylevel


regex: match double letter -> (.)\1


rpm: unpack w/o installing -> rpm2cpio newpackage-1-51.rpm | cpio -i --make-directories 
rpm: list info -> rpm -qip newPackage.rpm
rpm: list changes to files -> rpm -Va > changes.date  ( diff files periodically to find changes )
rpm: install RH signature -> rpm --import /usr/share/rhn/RPM-GPG-KEY


rsync: do test run -> rsync --dry-run from.dir to.dir
rsync: for backups -> rsync --verbose --progress --stats --recursive -- times --perms --links --delete /dir/from /dir/to 
rsync: mirror web site -> rsync -az -e ssh --delete some.dir some.site:'remote.dir'
rsync: sync current & remote dir -> rsync -auz -e ssh remote:/dir . && rsync -auz . remote:/dir


runlevels: check services ->  chkconfig --list smb 
runlevels: enable service ->  chkconfig --level 35 smb on


samba: find shares -> smbtree 
samba: find shares -> findsmb
samba: list shares -> smbclient -L windowsBox
samba: mount -t smbfs -o fmask=666,username=dave //fromWindowsBox/DavesBackup /media/mikesMachine/ 
samba: mount -t smbfs -o username=dave //192.168.1.18/DavesBackup /media/mikesMachine/       ( not on fedora )
samba: mount -t cifs -o user=dcuthbert,domain=liveops.com //192.168.32.128/July4 /mnt/samba  ( mount.cifs man page )


safari: turn on debug -> close safari; enter defaults write com.apple.Safari IncludeDebugMenu 1 in terminal


screen: start a process, close locally, restart  -> screen  ; <run cmd> ; ctrl+a ctrl+d ; <logout> ; screen -r


secure logs: tail -f /var/log/wtmp | nc remote_ip remote_port 
secure logs: tail -f /home/user/.history | nc remote_ip remote_port 
secure logs: tail -f /home/user/.bash_history | nc remote_ip remote_port 


send a message to all users logged into a machine -> wall "some text"
send a file/message to consol2 -> cat [message|filename] >/dev/pts/2


SMTP server: to test connection -> telnet somemailserver.domain 25
SMTP server: to test connection -> after the banner type: HELO yourdomain
SMTP server: to test connection -> other commands are MAIL, RCPT, DATA, QUIT


ssh no root access: vi /etc/ssh/sshd_config 
ssh no root access: change '#PermitRootLogin yes' to 'PermitRootLogin no'
ssh nologin: a@A~>  ssh-keygen -t rsa        #Create key pair
ssh nologin: a@A~>  ssh b@B mkdir -p .ssh    #Create remote dir
ssh nologin: a@A~>  cat .ssh/id_rsa.pub | ssh b@B 'cat >> .ssh/authorized_keys'  #Copy pub to remote
ssh tunnel: port 80 local to port 443 remote -> ssh -g -L 80:remote.machine:443 user@remote.machine


ssl: read certificate -> openssl x509 -in hostedcc.crt -text


SSL/TSL problems: to test imap connection -> openssl s_client -connect ox.open-xchange.com:993 -crlf  
SSL/TSL problems: to test http connection -> openssl s_client -connect ox.open-xchange.com:443 -crlf  


strace: a running process -> starce -p <PID>
strace: save strace output for a command -> strace -o output.file <command>


sysinfo: /proc/cpuinfo  - info on cpu
sysinfo: /proc/meminfo  - info on memory usage
sysinfo: /proc/partions - partition table info 
sysinfo: /proc/swaps - info on swap space
sysinfo: /proc/version - OS version 


tc: add qdisc to slow traffic    -> tc qdisc add dev eth0 root netem delay 100ms 10ms
tc: change qdisc to stop traffic -> tc qdisc change dev eth0 root netem loss 99%
tc: delete qdisc to restore eth0 -> tc qdisc delete dev eth0 root netem


tee:  send multiple ls results to screen and to someFile -> ls -aS | tee -a someFile


text: convert case ->  echo 'TeSt' | tr '[:lower:]' '[:upper:]'


time: windows equivalent -> powershell Measure-Command {<command>}


time zone: find out zone info -> tzselect
time zone: get current time -> TZ='Place/locale' date      ( Europe/London   America/Mexico_City  Pacific/Auckland )


top: get series of values for a process -> for i in `seq 1 10` ; do top -b -n 1 |grep proc_name ; echo ; sleep 1 ; done


top 10 processes, memory -> ps aux | sort -n -k4 | cut -c -95 | tail -10
top 10 processes, cpu -> ps aux | sort -n -k3 | cut -c -95 | tail -10


touch: change the creation date for a file -> touch -t 200612100606.06 /tmp/someFile


trace system library calls: ltrace -p process-id
trace system calls: strace -p process-id
trace system calls: get summary -> strace -c


tree: display directories as a tree --> tree -d


unzip .bz2 tarball: tar -xjvf file.tar.bz2


url shorteners: info, stats -->  bit.do  http://bit.do/eiwE --> http://bit.do/eiwE-
url shorteners: info, stats -->  bit.ly  https://bitly.com/1en9OdU --> https://bitly.com/1en9OdU+
url shorteners: info, stats -->  is.gd   http://is.gd/FBrAQX  -->  http://is.gd/stats.php?url=FBrAQX
url shorteners: info, stats -->  goo.gl  http://goo.gl/bvJGuS -->  http://goo.gl/bvJGuS+
url shorteners: info, stats -->  goo.gl  http://goo.gl/bvJGuS -->  http://goo.gl/bvJGuS.info
url shorteners: info, stats -->  tiny.cc  http://tiny.cc/ozfd9w  -->  http://tiny.cc/ozfd9w~
url shorteners: info, stats -->  tinyurl.com  http://tinyurl.com/mjnt93r -->  http://preview.tinyurl.com/mjnt93r
url shorteners: info, stats -->  v.gd    http://v.gd/yKvI5m  --> http://v.gd/stats.php?url=yKvI5m


vim: change color of line numbers -> :highlight LineNr ctermfg=grey
vim: delete up to but not including next 'Aa' -> d/Aa
vim: enable new features -> add 'set nocompatible' to .exrc
vim: enable better blocks -> add 'set virtualedit=block' to .exrc
vim: enter block mode -> ^v
vim: execute command stored in buffer x -> @x
vim: go to beginning/end of block -> o 
vim: highlight text by characers, from current pos to 'Aa' -> v /Aa
vim: highlight text by lines, from current pos to 'Aa' -> V /Aa
vim: increment/decrement a number -> cursor on number ^a / ^x
vim: remove extra white space -> :1,$s/[ ^I]*$//g
vim: replace from start to end of file -> :1,$s/find/replace/g
vim: replace from start to end of file -> :%s/find/replace/g
vim: record commands into register a -> qa [ type commands ] q
vim: yank to buffer a all text up to  # -> "ayt#
vim: yank and add to buffer a all text up to  # -> "Ayt#


vim: match parenthesis  ),],} -> cursor on one and press %


vmware: Add a cdrom to machine.vmx config file -> ide1:0.deviceType = "cdrom-raw"
vmware: Add a cdrom to machine.vmx config file -> ide1:0.fileName = "/dev/hdc"
vmware: Add a cd image to machine.vmx config file -> ide1:0.fileName = "/data/isos/EssentiallyBlank.iso"
vmware: Add a cd image to machine.vmx config file -> ide1:0.deviceType = "cdrom-image"
vmware: Boot order, disable anything other than cd -> bios.bootdeviceclasses = "deny: net hd fd usb"
vmware: Boot order, disable anything other than pxe -> bios.bootdeviceclasses = "deny: cd hd fd usb"
vmware: Boot order, force just one ( net )-> bios.bootdeviceclasses = "allow:net"
vmware: Boot order, force just one ( cd ) -> bios.bootdeviceclasses = "allow:cd"
vmware: Boot VM to BIOS -> bios.bootDelay = "NUM_TICKS_TO_WAIT_AT_PRESS_F2_SCREEN"
vmware: Boot VM to BIOS -> bios.forceSetupOnce = "true"
vmware: Change to another virtual terminal: chvt 1 ( cmd line 1-6 ) ( X 7 )
vmware: Don't recreate swap each GOS reboot -> sched.swap.persist = "TRUE"
vmware: Headless VM boot 1, edit .vmx to include: remoteDisplay.vnc.enabled = TRUE vmware: vmware: vmware: Headless VM boot 2, edit .vmx to include: remoteDisplay.vnc.port = 5910
vmware: headless VM boot 3, start VM by:  /usr/lib/vmware/bin/vmware-vmx -qx /path/to/vmxFile.vmx
vmware: dd On ThinESX:  need to add  conv=notrunc 
vmware: Install WS in VM on Windows -> HKEY_LOCAL_MACHINE\SOFTWARE\VMware, Inc.\Misc\InstallInVM = 0
vmware: RH filesystem remounts as ro: increase min_free_kbytes, echo "20000" > /proc/sys/vm/min_free_kbytes 
vmware: Setup network: create a switch -> esxcfg-vswitch -a vSwitch0
vmware: Setup network: create a portgroup -> esxcfg-vswitch -p "Service Console" vSwitch0
vmware: Setup network: assign a NIC -> esxcfg-vswitch -L vmnic0 vSwitch0
vmware: Setup network: config a vswif -> esxcfg-vswif -a vswif0 -p "Service Console" -i 192.xxx.xxx.xxx -n 255.xxx.xxx.xxx
vmware: Stop annoying beep: add 'mks.noBeep = "TRUE"' to .vmx file
vmware: Stop annoying beep, Ubuntu server: add 'blacklist pcspkr' to /etc/modprobe.d/blacklist 
vmware: Unofficial documentation of .vmx options -> http://sanbarrow.com/vmx.html


wall: Write a message to everyone logged into the machine


watch: watch command output repeatedly, highlight diffs -> watch -d command
watch: watch command output repeatedly, retain diffs -> watch -d --cumulative command


web: fetch a webpage from the command line -> GET www.google.com


webserver: test https connection -> openssl s_client -connect www.example.com:443
webserver: test http connection -> telnet www.example.com 80
webserver: test http -> GET /some/file HTTP/1.0<return><return>


website: keyword hits/day: www.digitalpoint.com


web test site: Cenzic (live) - http://crackme.cenzic.com/
web test site: Watchfire (live) - http://demo.testfire.net/
web test site: Acunetix (live) - http://testphp.acunetix.com/ http://testasp.acunetix.com http://testaspnet.acunetix.com
web test site: WebMaven / Buggy Bank - http://www.mavensecurity.com/webmaven
web test site: Foundstone SASS tools - http://www.foundstone.com/us/resources-free-tools.asp
web test site: Updated HackmeBank - http://www.o2-ounceopen.com/technical-info/2008/12/8/updated-version-of-hacmebank.html
web test site: OWASP WebGoat - http://www.owasp.org/index.php/OWASP_WebGoat_Project
web test site: OWASP SiteGenerator - http://www.owasp.org/index.php/Owasp_SiteGenerator
web test site: Stanford SecuriBench - http://suif.stanford.edu/~livshits/securibench/
web test site: SecuriBench Micro - http://suif.stanford.edu/~livshits/work/securibench-micro/
web test site: Google痴 web application training - http://jarlsberg.appspot.com/part1/ 
web test site: OWASP TOP 10 LAB (Online) - https://www.hacking-lab.com/Remote_Sec_Lab/free-owasp-top10-lab.html


wget: cygwin with proxy -> export http_proxy="http://proxy.vmware.com:3128"
wget: cygwin with wget -> export ftp_proxy="http://proxy.vmware.com:3128"
wget: cygwin with proxy -> wget --proxy-user "Wwall\JohnDoe" --proxy-passwd "SomePWD" http://prdownloads.somesite.net/file.iso


windows: accents, caret: <ctrl><shift><^> <vowel>
windows: accents, enyay: <ctrl><shift><~> <n>
windows: accents, to left: <ctrl><`> <vowel>
windows: accents, to right: <ctrl><'> <vowel>
windows: accents, umlaut: <ctrl><shift><:> <vowel>
windows: bounce network -> ipconfig /release ; ipconfig /renew
windows: get MAC address: ipconfig /all | find \I "physical"
windows: partitioning: diskpart
windows: print screen, active item ->  alt + print screen
windows: print screen, active application  ->  ctrl + print screen
windows: print screen, whole screen ->  shift + print screen
windows: put in shortcut for admin cmd.exe: runas /user:machine name\administrator cmd
windows: restart: shutdown -r -t 01
windows: runas in other domain: runas /user:user@domain.microsoft.com "notepad my_file.txt"
windows: shutdown: shutdown -s -t 01


windows 7: activate OS -> slmgr -ipk XXXXX-XXXXX-XXXXX-XXXXX-XXXXX
windows 7: disable McAfee IPS -> boot in 'safe' mode ; disable servie ; reboot 
windows 7: install telnet from cmd line -> pkgmgr /iu:"TelnetClient"
windows 7: reboot from cmd line -> shutdown /r /t 0
windows 7: run an admin cmd shell -> <run> runas /user:administrator cmd.exe 


winxp: speedup - disable last access writes -> FSUTIL behavior set disablelastaccess 1  ( reboot )
winxp: speedup - disable 8.3 filename compatability if no 16bit apps -> fsutil behavior set disable8dot3 1  


xss: attack strings ->  <script>alert("XSS");</script>
xss: attack strings ->  "searchTerm"><img src="x.x" onerror="alert('XSS')" />


xwindows: restart server -> <ctrl><alt><backspace>
xwindows: won't allow login: remove 0 length .xinitrc from home directory


yum: get rid of packages post install -> yum clean packages
yum: get all repositories ->   yum --enablerepo=* install package_name
yum: go from FC5 to FC6 -> yum clean all
yum: go from FC5 to FC6 -> rpm -Uhv 
     http://download.fedora.redhat.com/pub/fedora/linux/core/6/i386/os/Fedora/RPMS/fedora-release-6-4.noarch.rpm
     http://download.fedora.redhat.com/pub/fedora/linux/core/6/i386/os/Fedora/RPMS/fedora-release-notes-6-3.noarch.rpm 
yum: go from FC5 to FC6 -> yum -y update. 


zipped files: to read -> zless filename.gz
zipped files: to pipe -> zcat filename.gz | someUtil
