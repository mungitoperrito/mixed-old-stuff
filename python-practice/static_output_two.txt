# Command line tokenizer output for debugging. 

python-practice> python3 -m tokenize -e static_input_two
0,0-0,0:            ENCODING       'utf-8'
1,0-1,36:           COMMENT        '# Test file to find instances of foo'
1,36-1,37:          NL             '\n'
2,0-2,1:            NL             '\n'
3,0-3,28:           COMMENT        '# TEST: foo as function name'
3,28-3,29:          NL             '\n'
4,0-4,3:            NAME           'def'
4,4-4,7:            NAME           'foo'
4,7-4,8:            LPAR           '('
4,8-4,9:            RPAR           ')'
4,9-4,10:           COLON          ':'
4,10-4,11:          NEWLINE        '\n'
5,4-5,38:           COMMENT        '# TEST: foo inside a longer string'
5,38-5,39:          NL             '\n'
6,0-6,4:            INDENT         '    '
6,4-6,9:            NAME           'print'
6,9-6,10:           LPAR           '('
6,10-6,37:          STRING         '"This is a string with foo"'
6,37-6,38:          RPAR           ')'
6,38-6,39:          NEWLINE        '\n'
7,4-7,26:           COMMENT        '# TEST: foo on its own'
7,26-7,27:          NL             '\n'
8,4-8,9:            NAME           'print'
8,9-8,10:           LPAR           '('
8,10-8,15:          STRING         '"foo"'
8,15-8,16:          RPAR           ')'
8,16-8,17:          NEWLINE        '\n'
9,4-9,10:           NAME           'return'
9,11-9,16:          STRING         '"FOO"'
9,16-9,17:          NEWLINE        '\n'
10,0-10,1:          NL             '\n'
11,0-11,28:         COMMENT        '# TEST: foo in function name'
11,28-11,29:        NL             '\n'
12,0-12,0:          DEDENT         ''
12,0-12,3:          NAME           'def'
12,4-12,11:         NAME           'not_foo'
12,11-12,12:        LPAR           '('
12,12-12,13:        RPAR           ')'
12,13-12,14:        COLON          ':'
12,14-12,15:        NEWLINE        '\n'
13,0-13,4:          INDENT         '    '
13,4-13,10:         NAME           'return'
13,11-13,20:        STRING         '"NOT FOO"'
13,20-13,21:        NEWLINE        '\n'
14,0-14,1:          NL             '\n'
15,0-15,0:          DEDENT         ''
15,0-15,2:          NAME           'if'
15,3-15,11:         NAME           '__name__'
15,12-15,14:        EQEQUAL        '=='
15,15-15,25:        STRING         '"__main__"'
15,25-15,26:        COLON          ':'
15,26-15,27:        NEWLINE        '\n'
16,0-16,4:          INDENT         '    '
16,4-16,9:          NAME           'print'
16,9-16,10:         LPAR           '('
16,10-16,13:        NAME           'foo'
16,13-16,14:        RPAR           ')'
16,14-16,15:        NEWLINE        '\n'
17,4-17,9:          NAME           'print'
17,9-17,10:         LPAR           '('
17,10-17,17:        NAME           'not_foo'
17,17-17,18:        RPAR           ')'
17,18-17,19:        NEWLINE        '\n'
18,4-18,9:          NAME           'print'
18,9-18,10:         LPAR           '('
18,10-18,13:        NAME           'foo'
18,13-18,14:        LPAR           '('
18,14-18,15:        RPAR           ')'
18,15-18,16:        RPAR           ')'
18,16-18,17:        NEWLINE        '\n'
19,4-19,9:          NAME           'print'
19,9-19,10:         LPAR           '('
19,10-19,17:        NAME           'not_foo'
19,17-19,18:        LPAR           '('
19,18-19,19:        RPAR           ')'
19,19-19,20:        RPAR           ')'
19,20-19,21:        NEWLINE        '\n'
20,0-20,0:          DEDENT         ''
20,0-20,0:          ENDMARKER      ''
